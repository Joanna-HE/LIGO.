// Generated by gencpp from file nlosExclusion/GNSS_Raw_Array.msg
// DO NOT EDIT!


#ifndef NLOSEXCLUSION_MESSAGE_GNSS_RAW_ARRAY_H
#define NLOSEXCLUSION_MESSAGE_GNSS_RAW_ARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <Urbannav_process/nlosExclusion/GNSS_Raw.h>
#include <Urbannav_process/nlosExclusion/GNSS_Raw_mf.h>

namespace nlosExclusion
{
template <class ContainerAllocator>
struct GNSS_Raw_Array_
{
  typedef GNSS_Raw_Array_<ContainerAllocator> Type;

  GNSS_Raw_Array_()
    : header()
    , GNSS_Raws()
    , GNSS_Raws_mf()  {
    }
  GNSS_Raw_Array_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , GNSS_Raws(_alloc)
    , GNSS_Raws_mf(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::nlosExclusion::GNSS_Raw_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::nlosExclusion::GNSS_Raw_<ContainerAllocator> >> _GNSS_Raws_type;
  _GNSS_Raws_type GNSS_Raws;

   typedef std::vector< ::nlosExclusion::GNSS_Raw_mf_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::nlosExclusion::GNSS_Raw_mf_<ContainerAllocator> >> _GNSS_Raws_mf_type;
  _GNSS_Raws_mf_type GNSS_Raws_mf;





  typedef boost::shared_ptr< ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator> const> ConstPtr;

}; // struct GNSS_Raw_Array_

typedef ::nlosExclusion::GNSS_Raw_Array_<std::allocator<void> > GNSS_Raw_Array;

typedef boost::shared_ptr< ::nlosExclusion::GNSS_Raw_Array > GNSS_Raw_ArrayPtr;
typedef boost::shared_ptr< ::nlosExclusion::GNSS_Raw_Array const> GNSS_Raw_ArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator1> & lhs, const ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.GNSS_Raws == rhs.GNSS_Raws &&
    lhs.GNSS_Raws_mf == rhs.GNSS_Raws_mf;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator1> & lhs, const ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nlosExclusion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac653f2d58ffb144c4ffc5c63c3254bf";
  }

  static const char* value(const ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac653f2d58ffb144ULL;
  static const uint64_t static_value2 = 0xc4ffc5c63c3254bfULL;
};

template<class ContainerAllocator>
struct DataType< ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nlosExclusion/GNSS_Raw_Array";
  }

  static const char* value(const ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"nlosExclusion/GNSS_Raw[] GNSS_Raws\n"
"nlosExclusion/GNSS_Raw_mf[] GNSS_Raws_mf\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: nlosExclusion/GNSS_Raw\n"
"float64 GNSS_week\n"
"float64 GNSS_time\n"
"float64 total_sv\n"
"float64 prn_satellites_index\n"
"float64 pseudorange\n"
"float64 raw_pseudorange\n"
"float64 carrier_phase\n"
"float64 doppler\n"
"float64 lamda\n"
"float64 snr\n"
"int64 LLI\n"
"int64 slip #0 no cycle slip or no carrier, 1 yes\n"
"float64 elevation\n"
"float64 azimuth\n"
"float64 err_tropo\n"
"float64 err_iono\n"
"float64 sat_clk_err\n"
"float64 sat_pos_x\n"
"float64 sat_pos_y\n"
"float64 sat_pos_z\n"
"float64 ttx # satellite obstime - tof - satellite clock bias\n"
"float64 vel_x # satellite velocity \n"
"float64 vel_y # satellite velocity \n"
"float64 vel_z # satellite velocity \n"
"float64 dt # satellite clock drift\n"
"float64 ddt # satellite clock drift rate\n"
"float64 tgd # /* group delay parameters (Prange function in RTKLIB) */\n"
"#float64 GNSSCovariance\n"
"int64 visable #0-Not sure 1-visable 2-invisable\n"
"string  sat_system\n"
"int64 visable3DMA # ground truth visibility from 3DMA\n"
"float64 prE3dMA # ground truth pseudorange error from 3DMA\n"
"\n"
"\n"
"================================================================================\n"
"MSG: nlosExclusion/GNSS_Raw_mf\n"
"float64 GNSS_week\n"
"float64 GNSS_time\n"
"float64 total_sv\n"
"float64 prn_satellites_index\n"
"float64 constellation\n"
"float64[] pseudorange\n"
"float64[] raw_pseudorange\n"
"float64[] carrier_phase\n"
"float64[] raw_carrier_phase\n"
"float64[] doppler\n"
"float64[] lamda\n"
"float64[] snr\n"
"float64 GNCWeights\n"
"int64 LLI\n"
"int64 slip #0 no cycle slip or no carrier, 1 yes\n"
"float64 elevation\n"
"float64 azimuth\n"
"float64 err_tropo\n"
"float64[] err_iono\n"
"float64 sat_clk_err\n"
"float64 sat_pos_x\n"
"float64 sat_pos_y\n"
"float64 sat_pos_z\n"
"float64 ttx # satellite obstime - tof - satellite clock bias\n"
"float64 vel_x # satellite velocity \n"
"float64 vel_y # satellite velocity \n"
"float64 vel_z # satellite velocity \n"
"float64 dt # satellite clock drift\n"
"float64 ddt # satellite clock drift rate\n"
"float64 tgd # /* group delay parameters (Prange function in RTKLIB) */\n"
"#float64 GNSSCovariance\n"
"int64 visable #0-Not sure 1-visable 2-invisable\n"
"string  sat_system\n"
"int64 visable3DMA # ground truth visibility from 3DMA\n"
"float64 prE3dMA # ground truth pseudorange error from 3DMA\n"
"\n"
;
  }

  static const char* value(const ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.GNSS_Raws);
      stream.next(m.GNSS_Raws_mf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GNSS_Raw_Array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nlosExclusion::GNSS_Raw_Array_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "GNSS_Raws[]" << std::endl;
    for (size_t i = 0; i < v.GNSS_Raws.size(); ++i)
    {
      s << indent << "  GNSS_Raws[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::nlosExclusion::GNSS_Raw_<ContainerAllocator> >::stream(s, indent + "    ", v.GNSS_Raws[i]);
    }
    s << indent << "GNSS_Raws_mf[]" << std::endl;
    for (size_t i = 0; i < v.GNSS_Raws_mf.size(); ++i)
    {
      s << indent << "  GNSS_Raws_mf[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::nlosExclusion::GNSS_Raw_mf_<ContainerAllocator> >::stream(s, indent + "    ", v.GNSS_Raws_mf[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NLOSEXCLUSION_MESSAGE_GNSS_RAW_ARRAY_H
