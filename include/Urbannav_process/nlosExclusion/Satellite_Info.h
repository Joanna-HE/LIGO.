// Generated by gencpp from file nlosExclusion/Satellite_Info.msg
// DO NOT EDIT!


#ifndef NLOSEXCLUSION_MESSAGE_SATELLITE_INFO_H
#define NLOSEXCLUSION_MESSAGE_SATELLITE_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nlosExclusion
{
template <class ContainerAllocator>
struct Satellite_Info_
{
  typedef Satellite_Info_<ContainerAllocator> Type;

  Satellite_Info_()
    : GNSS_time(0.0)
    , total_sv(0.0)
    , GPSNum(0.0)
    , BeidouNum(0.0)
    , GPSExcluded(0.0)
    , BeidouExcluded(0.0)  {
    }
  Satellite_Info_(const ContainerAllocator& _alloc)
    : GNSS_time(0.0)
    , total_sv(0.0)
    , GPSNum(0.0)
    , BeidouNum(0.0)
    , GPSExcluded(0.0)
    , BeidouExcluded(0.0)  {
  (void)_alloc;
    }



   typedef double _GNSS_time_type;
  _GNSS_time_type GNSS_time;

   typedef double _total_sv_type;
  _total_sv_type total_sv;

   typedef double _GPSNum_type;
  _GPSNum_type GPSNum;

   typedef double _BeidouNum_type;
  _BeidouNum_type BeidouNum;

   typedef double _GPSExcluded_type;
  _GPSExcluded_type GPSExcluded;

   typedef double _BeidouExcluded_type;
  _BeidouExcluded_type BeidouExcluded;





  typedef boost::shared_ptr< ::nlosExclusion::Satellite_Info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nlosExclusion::Satellite_Info_<ContainerAllocator> const> ConstPtr;

}; // struct Satellite_Info_

typedef ::nlosExclusion::Satellite_Info_<std::allocator<void> > Satellite_Info;

typedef boost::shared_ptr< ::nlosExclusion::Satellite_Info > Satellite_InfoPtr;
typedef boost::shared_ptr< ::nlosExclusion::Satellite_Info const> Satellite_InfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nlosExclusion::Satellite_Info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nlosExclusion::Satellite_Info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nlosExclusion::Satellite_Info_<ContainerAllocator1> & lhs, const ::nlosExclusion::Satellite_Info_<ContainerAllocator2> & rhs)
{
  return lhs.GNSS_time == rhs.GNSS_time &&
    lhs.total_sv == rhs.total_sv &&
    lhs.GPSNum == rhs.GPSNum &&
    lhs.BeidouNum == rhs.BeidouNum &&
    lhs.GPSExcluded == rhs.GPSExcluded &&
    lhs.BeidouExcluded == rhs.BeidouExcluded;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nlosExclusion::Satellite_Info_<ContainerAllocator1> & lhs, const ::nlosExclusion::Satellite_Info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nlosExclusion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::nlosExclusion::Satellite_Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nlosExclusion::Satellite_Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nlosExclusion::Satellite_Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nlosExclusion::Satellite_Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nlosExclusion::Satellite_Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nlosExclusion::Satellite_Info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nlosExclusion::Satellite_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "20a81c003be71b4e6d03512fc572c1b0";
  }

  static const char* value(const ::nlosExclusion::Satellite_Info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x20a81c003be71b4eULL;
  static const uint64_t static_value2 = 0x6d03512fc572c1b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::nlosExclusion::Satellite_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nlosExclusion/Satellite_Info";
  }

  static const char* value(const ::nlosExclusion::Satellite_Info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nlosExclusion::Satellite_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 GNSS_time # Time for this epoch\n"
"float64 total_sv  # Total satellites numbers\n"
"float64 GPSNum    # GPS satellites numbers \n"
"float64 BeidouNum # Beidou satellites numbers\n"
"float64 GPSExcluded # excluded GPS satellites numbers\n"
"float64 BeidouExcluded # excluded Beidou satellites numbers \n"
;
  }

  static const char* value(const ::nlosExclusion::Satellite_Info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nlosExclusion::Satellite_Info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.GNSS_time);
      stream.next(m.total_sv);
      stream.next(m.GPSNum);
      stream.next(m.BeidouNum);
      stream.next(m.GPSExcluded);
      stream.next(m.BeidouExcluded);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Satellite_Info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nlosExclusion::Satellite_Info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nlosExclusion::Satellite_Info_<ContainerAllocator>& v)
  {
    s << indent << "GNSS_time: ";
    Printer<double>::stream(s, indent + "  ", v.GNSS_time);
    s << indent << "total_sv: ";
    Printer<double>::stream(s, indent + "  ", v.total_sv);
    s << indent << "GPSNum: ";
    Printer<double>::stream(s, indent + "  ", v.GPSNum);
    s << indent << "BeidouNum: ";
    Printer<double>::stream(s, indent + "  ", v.BeidouNum);
    s << indent << "GPSExcluded: ";
    Printer<double>::stream(s, indent + "  ", v.GPSExcluded);
    s << indent << "BeidouExcluded: ";
    Printer<double>::stream(s, indent + "  ", v.BeidouExcluded);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NLOSEXCLUSION_MESSAGE_SATELLITE_INFO_H
